{"version":3,"sources":["../../src/components/LoadingAnimation/LoadingAnimation.tsx","../../src/components/InfiniteTable/InfiniteTable.tsx","App.tsx","index.tsx"],"names":["LoadingAnimation","React","className","styles","loadingAnimation","InfiniteTable","tableContainerClassName","tableClassName","headerRowRenderer","bodyRowRenderer","height","stickyHeader","items","ITEM_HEIGHT","itemHeight","isLoading","fetchMore","itemsTotalLength","loadingComponent","LoadingComponent","nodePadding","tableContainerRef","loaderRef","scrollPosition","setScrollPosition","startFetchItems","setStartFetchItems","offsetY","visibleNodesCount","startNode","renderingParams","setRenderingParams","calcRenderingParams","Math","triggerFetchMore","entities","observer","IntersectionObserver","root","rootMargin","threshold","startFetchMore","e","renderRows","Array","index","renderPlaceHolderContainer","style","onScroll","ref","undefined","App","useState","setItems","setIsLoading","useCallback","moreItems","fill","map","firstName","faker","name","lastName","title","jobTitle","setTimeout","prev","item","i","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2bb61be3.chunk.js","sourcesContent":["import * as React from 'react'\nimport styles from '../../styles.module.css'\n\nconst LoadingAnimation = () => (\n  <tr>\n    <div className={styles.loadingAnimation}>\n      <div />\n      <div />\n      <div />\n      <div />\n    </div>\n  </tr>\n)\n\nexport default LoadingAnimation\n","import * as React from 'react'\nimport styles from '../../styles.module.css'\nimport LoadingAnimation from '../LoadingAnimation'\n\ninterface Props {\n  tableContainerClassName?: string\n  tableClassName?: string\n  headerRowRenderer: () => any\n  bodyRowRenderer: (item: any, index: number) => any\n  height: number\n  stickyHeader?: boolean\n  items: Array<any>\n  itemHeight: number\n  isLoading: boolean\n  fetchMore: () => any\n  itemsTotalLength: number\n  loadingComponent?: React.FC\n  nodePadding?: number\n}\n\nconst InfiniteTable = ({\n  tableContainerClassName,\n  tableClassName,\n  headerRowRenderer,\n  bodyRowRenderer,\n  height,\n  stickyHeader,\n  items,\n  itemHeight: ITEM_HEIGHT,\n  isLoading,\n  fetchMore,\n  itemsTotalLength,\n  loadingComponent: LoadingComponent = LoadingAnimation,\n  nodePadding = 6\n}: Props) => {\n  const tableContainerRef = React.useRef<HTMLDivElement>(null)\n  const loaderRef = React.useRef<HTMLTableRowElement>(null)\n  const [scrollPosition, setScrollPosition] = React.useState(0)\n  const [startFetchItems, setStartFetchItems] = React.useState(false)\n  const [renderingParams, setRenderingParams] = React.useState({\n    offsetY: 0,\n    visibleNodesCount: 0,\n    startNode: 0\n  })\n\n  React.useEffect(() => {\n    calcRenderingParams()\n  }, [scrollPosition])\n\n  React.useEffect(() => {\n    calcRenderingParams()\n  }, [items])\n\n  const calcRenderingParams = React.useCallback(() => {\n    let startNode = Math.floor(scrollPosition / ITEM_HEIGHT) - nodePadding\n    startNode = Math.max(0, startNode)\n\n    let visibleNodesCount = Math.ceil(height / ITEM_HEIGHT) + 2 * nodePadding\n    visibleNodesCount = Math.min(items.length - startNode, visibleNodesCount)\n    visibleNodesCount = Math.max(0, visibleNodesCount)\n\n    setRenderingParams({\n      offsetY: startNode * ITEM_HEIGHT,\n      visibleNodesCount,\n      startNode\n    })\n  }, [scrollPosition, items])\n\n  React.useEffect(() => {\n    if (!isLoading) {\n      setStartFetchItems(false)\n    }\n  }, [isLoading])\n\n  React.useEffect(() => {\n    if (startFetchItems && items.length !== itemsTotalLength) {\n      fetchMore()\n    }\n  }, [startFetchItems])\n\n  const triggerFetchMore = React.useCallback(\n    (entities) => {\n      const target = entities[0]\n      if (target.isIntersecting) {\n        setStartFetchItems(true)\n      }\n    },\n    [items, startFetchItems]\n  )\n\n  React.useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '20px',\n      threshold: 1.0\n    }\n\n    const observer = new IntersectionObserver(triggerFetchMore, options)\n    if (loaderRef.current) {\n      observer.observe(loaderRef.current)\n    }\n  }, [loaderRef.current, triggerFetchMore])\n\n  const startFetchMore = React.useCallback(\n    (e) => {\n      if (e.target === tableContainerRef.current) {\n        setScrollPosition(e.target.scrollTop)\n      }\n    },\n    [tableContainerRef]\n  )\n\n  const renderRows = React.useMemo(() => {\n    return items.length\n      ? new Array(renderingParams.visibleNodesCount)\n          .fill(null)\n          .map((_, index) =>\n            items[index + renderingParams.startNode]\n              ? bodyRowRenderer(\n                  items[index + renderingParams.startNode],\n                  index + renderingParams.startNode\n                )\n              : null\n          )\n      : null\n  }, [items, renderingParams])\n\n  const renderPlaceHolderContainer = (index: number) => {\n    return <tr style={{ height: index * ITEM_HEIGHT }} />\n  }\n\n  return (\n    <div\n      className={[styles.tableContainer, tableContainerClassName].join(' ')}\n      onScroll={startFetchMore}\n      ref={tableContainerRef}\n      style={{ height }}\n    >\n      <table\n        className={[styles.table, tableClassName].join(' ')}\n        style={{\n          height: items.length ? items.length * ITEM_HEIGHT : ITEM_HEIGHT\n        }}\n      >\n        <thead className={stickyHeader ? styles.stickyHeader : undefined}>\n          {headerRowRenderer()}\n        </thead>\n        <tbody>\n          {renderPlaceHolderContainer(renderingParams.startNode)}\n          {renderRows}\n          {isLoading && <LoadingComponent />}\n          <tr ref={loaderRef} />\n          {renderPlaceHolderContainer(\n            items.length -\n              (renderingParams.startNode + renderingParams.visibleNodesCount)\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default InfiniteTable\n","import React, { useCallback, useState } from 'react'\nimport faker from 'faker'\n\nimport './index.css'\nimport { InfiniteTable } from 'react-virtualized-infinite-table'\nimport 'react-virtualized-infinite-table/dist/index.css'\n\nconst App = () => {\n  const [items, setItems] = useState<any>([])\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [itemsTotalLength] = useState(1000)\n\n  const fetchMore = useCallback(() => {\n    setIsLoading(true)\n    const moreItems = new Array(20).fill(null).map(() => ({\n      firstName: faker.name.firstName(),\n      lastName: faker.name.lastName(),\n      title: faker.name.title(),\n      jobTitle: faker.name.jobTitle()\n    }))\n    setTimeout(() => {\n      setItems((prev: any) => [...prev, ...moreItems])\n      setIsLoading(false)\n    }, 200)\n  }, [])\n\n  const bodyRowRenderer = useCallback((item, i) => (\n    <tr key={i} className={\"table-row\"}>\n      <td>{item.firstName}</td>\n      <td>{item.lastName}</td>\n      <td>{item.title}</td>\n      <td>{item.jobTitle}</td>\n    </tr>\n  ), [])\n\n  const headerRowRenderer = useCallback(() => (\n    <tr className={\"table-row\"}>\n      <td>FirstName</td>\n      <td>LastName</td>\n      <td>Title</td>\n      <td>JobTitle</td>\n    </tr>\n  ), [])\n\n  return (\n    <div>\n      <h1>React Virtualized Infinite Table</h1>\n      <InfiniteTable\n        tableClassName={\"table\"}\n        height={800}\n        bodyRowRenderer={bodyRowRenderer}\n        headerRowRenderer={headerRowRenderer}\n        fetchMore={fetchMore}\n        isLoading={isLoading}\n        itemHeight={75}\n        items={items}\n        itemsTotalLength={itemsTotalLength}\n        stickyHeader\n      />\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}